// ai/chatAI.js

const { GoogleGenerativeAI } = require('@google/generative-ai');
const Event = require("../models/Event");

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);
const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

async function generateRecommendationsDirect(prompt) {
    try {
        const events = await Event.find();
        const currentDate = new Date();
        const upcomingEvents = events.filter(event =>
            event.eventDate && new Date(event.eventDate) >= currentDate
        );


        const fullPrompt = `
–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ SDU.

–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Å—Ç—É–¥–µ–Ω—Ç—É —Å—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∂–∏–∑–Ω–∏ –≤—É–∑–∞, –ø–æ—Å–µ—â–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–π —Ç–µ, —á—Ç–æ –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –∑–∞–≤–æ–¥–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∞–∫—Ç–∏–≤–∏—Å—Ç–æ–º –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–º–ø—É—Å–∞.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "${prompt}"

–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:
${upcomingEvents.map((e, i) => `
${i + 1}.
–ù–∞–∑–≤–∞–Ω–∏–µ: ${e.title}
ID: "${e._id}"
–õ–æ–∫–∞—Ü–∏—è: ${e.location || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
–î–∞—Ç–∞: ${new Date(e.eventDate).toLocaleDateString()}
–û–ø–∏—Å–∞–Ω–∏–µ: ${e.description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}`).join("\n\n")}

–í—ã–±–µ—Ä–∏ 2‚Äì4 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –µ–≥–æ –∑–∞–ø—Ä–æ—Å. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è—Å–Ω–∏ –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏, –ø–æ—á–µ–º—É –æ–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç. –ù–ï —É–ø–æ–º–∏–Ω–∞–π ID –≤ —Ç–µ–∫—Å—Ç–µ.

üéØ –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON-–º–∞—Å—Å–∏–≤ ID –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü—Ä–∏–º–µ—Ä: ["id1", "id2"]
`;


        const result = await model.generateContent({
            contents: [
                {
                    role: "user",
                    parts: [{ text: fullPrompt }]
                }
            ]
        });


        const text = result.response.text();
        // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ JSON-–º–∞—Å—Å–∏–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        const match = text.match(/\[.*\]/s);
        let ids = [];
        if (match) {
            try {
                const jsonCandidate = match[0].trim();
                if (jsonCandidate.startsWith("[") && jsonCandidate.endsWith("]")) {
                    ids = JSON.parse(jsonCandidate);
                }
            } catch (e) {
                console.warn("‚ö†Ô∏è JSON-–ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è:", e);
            }
        }



// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Ç–µ–∫—Å—Ç, –∏ ID, –¥–∞–∂–µ –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π
        return {
            response: text.split(match?.[0])[0].trim(), // –¢–µ–∫—Å—Ç –±–µ–∑ JSON
            recommendedEvents: ids
        };

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:", error);
        return {
            response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            recommendedEvents: []
        };
    }
}

module.exports = { generateRecommendationsDirect };
